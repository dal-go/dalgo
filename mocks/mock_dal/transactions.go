// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dal-go/dalgo/dal (interfaces: Transaction,ReadTransaction,ReadwriteTransaction)
//
// Generated by this command:
//
//	mockgen github.com/dal-go/dalgo/dal Transaction,ReadTransaction,ReadwriteTransaction
//

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	context "context"
	reflect "reflect"

	dal "github.com/dal-go/dalgo/dal"
	update "github.com/dal-go/dalgo/update"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Options mocks base method.
func (m *MockTransaction) Options() dal.TransactionOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(dal.TransactionOptions)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockTransactionMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockTransaction)(nil).Options))
}

// MockReadTransaction is a mock of ReadTransaction interface.
type MockReadTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockReadTransactionMockRecorder
	isgomock struct{}
}

// MockReadTransactionMockRecorder is the mock recorder for MockReadTransaction.
type MockReadTransactionMockRecorder struct {
	mock *MockReadTransaction
}

// NewMockReadTransaction creates a new mock instance.
func NewMockReadTransaction(ctrl *gomock.Controller) *MockReadTransaction {
	mock := &MockReadTransaction{ctrl: ctrl}
	mock.recorder = &MockReadTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadTransaction) EXPECT() *MockReadTransactionMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockReadTransaction) Exists(ctx context.Context, key *dal.Key) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockReadTransactionMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockReadTransaction)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockReadTransaction) Get(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReadTransactionMockRecorder) Get(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadTransaction)(nil).Get), ctx, record)
}

// GetMulti mocks base method.
func (m *MockReadTransaction) GetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockReadTransactionMockRecorder) GetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockReadTransaction)(nil).GetMulti), ctx, records)
}

// Options mocks base method.
func (m *MockReadTransaction) Options() dal.TransactionOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(dal.TransactionOptions)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockReadTransactionMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockReadTransaction)(nil).Options))
}

// QueryAllRecords mocks base method.
func (m *MockReadTransaction) QueryAllRecords(ctx context.Context, query dal.Query) ([]dal.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllRecords", ctx, query)
	ret0, _ := ret[0].([]dal.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllRecords indicates an expected call of QueryAllRecords.
func (mr *MockReadTransactionMockRecorder) QueryAllRecords(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllRecords", reflect.TypeOf((*MockReadTransaction)(nil).QueryAllRecords), ctx, query)
}

// QueryReader mocks base method.
func (m *MockReadTransaction) QueryReader(ctx context.Context, query dal.Query) (dal.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReader", ctx, query)
	ret0, _ := ret[0].(dal.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReader indicates an expected call of QueryReader.
func (mr *MockReadTransactionMockRecorder) QueryReader(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReader", reflect.TypeOf((*MockReadTransaction)(nil).QueryReader), ctx, query)
}

// MockReadwriteTransaction is a mock of ReadwriteTransaction interface.
type MockReadwriteTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockReadwriteTransactionMockRecorder
	isgomock struct{}
}

// MockReadwriteTransactionMockRecorder is the mock recorder for MockReadwriteTransaction.
type MockReadwriteTransactionMockRecorder struct {
	mock *MockReadwriteTransaction
}

// NewMockReadwriteTransaction creates a new mock instance.
func NewMockReadwriteTransaction(ctrl *gomock.Controller) *MockReadwriteTransaction {
	mock := &MockReadwriteTransaction{ctrl: ctrl}
	mock.recorder = &MockReadwriteTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadwriteTransaction) EXPECT() *MockReadwriteTransactionMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockReadwriteTransaction) Delete(ctx context.Context, key *dal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReadwriteTransactionMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReadwriteTransaction)(nil).Delete), ctx, key)
}

// DeleteMulti mocks base method.
func (m *MockReadwriteTransaction) DeleteMulti(ctx context.Context, keys []*dal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulti", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti.
func (mr *MockReadwriteTransactionMockRecorder) DeleteMulti(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockReadwriteTransaction)(nil).DeleteMulti), ctx, keys)
}

// Exists mocks base method.
func (m *MockReadwriteTransaction) Exists(ctx context.Context, key *dal.Key) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockReadwriteTransactionMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockReadwriteTransaction)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockReadwriteTransaction) Get(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReadwriteTransactionMockRecorder) Get(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadwriteTransaction)(nil).Get), ctx, record)
}

// GetMulti mocks base method.
func (m *MockReadwriteTransaction) GetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockReadwriteTransactionMockRecorder) GetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockReadwriteTransaction)(nil).GetMulti), ctx, records)
}

// ID mocks base method.
func (m *MockReadwriteTransaction) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockReadwriteTransactionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockReadwriteTransaction)(nil).ID))
}

// Insert mocks base method.
func (m *MockReadwriteTransaction) Insert(ctx context.Context, record dal.Record, opts ...dal.InsertOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockReadwriteTransactionMockRecorder) Insert(ctx, record any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockReadwriteTransaction)(nil).Insert), varargs...)
}

// InsertMulti mocks base method.
func (m *MockReadwriteTransaction) InsertMulti(ctx context.Context, records []dal.Record, opts ...dal.InsertOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, records}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockReadwriteTransactionMockRecorder) InsertMulti(ctx, records any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, records}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockReadwriteTransaction)(nil).InsertMulti), varargs...)
}

// Options mocks base method.
func (m *MockReadwriteTransaction) Options() dal.TransactionOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(dal.TransactionOptions)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockReadwriteTransactionMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockReadwriteTransaction)(nil).Options))
}

// QueryAllRecords mocks base method.
func (m *MockReadwriteTransaction) QueryAllRecords(ctx context.Context, query dal.Query) ([]dal.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllRecords", ctx, query)
	ret0, _ := ret[0].([]dal.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllRecords indicates an expected call of QueryAllRecords.
func (mr *MockReadwriteTransactionMockRecorder) QueryAllRecords(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllRecords", reflect.TypeOf((*MockReadwriteTransaction)(nil).QueryAllRecords), ctx, query)
}

// QueryReader mocks base method.
func (m *MockReadwriteTransaction) QueryReader(ctx context.Context, query dal.Query) (dal.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReader", ctx, query)
	ret0, _ := ret[0].(dal.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReader indicates an expected call of QueryReader.
func (mr *MockReadwriteTransactionMockRecorder) QueryReader(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReader", reflect.TypeOf((*MockReadwriteTransaction)(nil).QueryReader), ctx, query)
}

// Set mocks base method.
func (m *MockReadwriteTransaction) Set(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockReadwriteTransactionMockRecorder) Set(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockReadwriteTransaction)(nil).Set), ctx, record)
}

// SetMulti mocks base method.
func (m *MockReadwriteTransaction) SetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMulti indicates an expected call of SetMulti.
func (mr *MockReadwriteTransactionMockRecorder) SetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMulti", reflect.TypeOf((*MockReadwriteTransaction)(nil).SetMulti), ctx, records)
}

// Update mocks base method.
func (m *MockReadwriteTransaction) Update(ctx context.Context, key *dal.Key, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReadwriteTransactionMockRecorder) Update(ctx, key, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReadwriteTransaction)(nil).Update), varargs...)
}

// UpdateMulti mocks base method.
func (m *MockReadwriteTransaction) UpdateMulti(ctx context.Context, keys []*dal.Key, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keys, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockReadwriteTransactionMockRecorder) UpdateMulti(ctx, keys, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keys, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockReadwriteTransaction)(nil).UpdateMulti), varargs...)
}

// UpdateRecord mocks base method.
func (m *MockReadwriteTransaction) UpdateRecord(ctx context.Context, record dal.Record, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecord", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockReadwriteTransactionMockRecorder) UpdateRecord(ctx, record, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockReadwriteTransaction)(nil).UpdateRecord), varargs...)
}
