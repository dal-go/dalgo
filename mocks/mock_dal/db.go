// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dal-go/dalgo/dal (interfaces: DB)
//
// Generated by this command:
//
//	mockgen github.com/dal-go/dalgo/dal DB
//

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	context "context"
	reflect "reflect"

	dal "github.com/dal-go/dalgo/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Adapter mocks base method.
func (m *MockDB) Adapter() dal.Adapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Adapter")
	ret0, _ := ret[0].(dal.Adapter)
	return ret0
}

// Adapter indicates an expected call of Adapter.
func (mr *MockDBMockRecorder) Adapter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Adapter", reflect.TypeOf((*MockDB)(nil).Adapter))
}

// Exists mocks base method.
func (m *MockDB) Exists(ctx context.Context, key *dal.Key) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDBMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDB)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockDB) Get(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), ctx, record)
}

// GetMulti mocks base method.
func (m *MockDB) GetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockDBMockRecorder) GetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockDB)(nil).GetMulti), ctx, records)
}

// ID mocks base method.
func (m *MockDB) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDBMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDB)(nil).ID))
}

// QueryAllRecords mocks base method.
func (m *MockDB) QueryAllRecords(ctx context.Context, query dal.Query) ([]dal.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllRecords", ctx, query)
	ret0, _ := ret[0].([]dal.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllRecords indicates an expected call of QueryAllRecords.
func (mr *MockDBMockRecorder) QueryAllRecords(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllRecords", reflect.TypeOf((*MockDB)(nil).QueryAllRecords), ctx, query)
}

// QueryReader mocks base method.
func (m *MockDB) QueryReader(ctx context.Context, query dal.Query) (dal.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReader", ctx, query)
	ret0, _ := ret[0].(dal.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReader indicates an expected call of QueryReader.
func (mr *MockDBMockRecorder) QueryReader(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReader", reflect.TypeOf((*MockDB)(nil).QueryReader), ctx, query)
}

// RunReadonlyTransaction mocks base method.
func (m *MockDB) RunReadonlyTransaction(ctx context.Context, f func(context.Context, dal.ReadTransaction) error, options ...dal.TransactionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunReadonlyTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadonlyTransaction indicates an expected call of RunReadonlyTransaction.
func (mr *MockDBMockRecorder) RunReadonlyTransaction(ctx, f any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadonlyTransaction", reflect.TypeOf((*MockDB)(nil).RunReadonlyTransaction), varargs...)
}

// RunReadwriteTransaction mocks base method.
func (m *MockDB) RunReadwriteTransaction(ctx context.Context, f func(context.Context, dal.ReadwriteTransaction) error, options ...dal.TransactionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunReadwriteTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunReadwriteTransaction indicates an expected call of RunReadwriteTransaction.
func (mr *MockDBMockRecorder) RunReadwriteTransaction(ctx, f any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReadwriteTransaction", reflect.TypeOf((*MockDB)(nil).RunReadwriteTransaction), varargs...)
}
