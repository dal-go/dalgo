// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dal-go/dalgo/dal (interfaces: ReadSession,WriteSession,ReadwriteSession)
//
// Generated by this command:
//
//	mockgen github.com/dal-go/dalgo/dal ReadSession,WriteSession,ReadwriteSession
//

// Package mock_dal is a generated GoMock package.
package mock_dal

import (
	context "context"
	reflect "reflect"

	dal "github.com/dal-go/dalgo/dal"
	update "github.com/dal-go/dalgo/update"
	gomock "go.uber.org/mock/gomock"
)

// MockReadSession is a mock of ReadSession interface.
type MockReadSession struct {
	ctrl     *gomock.Controller
	recorder *MockReadSessionMockRecorder
	isgomock struct{}
}

// MockReadSessionMockRecorder is the mock recorder for MockReadSession.
type MockReadSessionMockRecorder struct {
	mock *MockReadSession
}

// NewMockReadSession creates a new mock instance.
func NewMockReadSession(ctrl *gomock.Controller) *MockReadSession {
	mock := &MockReadSession{ctrl: ctrl}
	mock.recorder = &MockReadSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadSession) EXPECT() *MockReadSessionMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockReadSession) Exists(ctx context.Context, key *dal.Key) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockReadSessionMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockReadSession)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockReadSession) Get(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReadSessionMockRecorder) Get(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadSession)(nil).Get), ctx, record)
}

// GetMulti mocks base method.
func (m *MockReadSession) GetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockReadSessionMockRecorder) GetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockReadSession)(nil).GetMulti), ctx, records)
}

// QueryAllRecords mocks base method.
func (m *MockReadSession) QueryAllRecords(ctx context.Context, query dal.Query) ([]dal.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllRecords", ctx, query)
	ret0, _ := ret[0].([]dal.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllRecords indicates an expected call of QueryAllRecords.
func (mr *MockReadSessionMockRecorder) QueryAllRecords(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllRecords", reflect.TypeOf((*MockReadSession)(nil).QueryAllRecords), ctx, query)
}

// QueryReader mocks base method.
func (m *MockReadSession) QueryReader(ctx context.Context, query dal.Query) (dal.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReader", ctx, query)
	ret0, _ := ret[0].(dal.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReader indicates an expected call of QueryReader.
func (mr *MockReadSessionMockRecorder) QueryReader(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReader", reflect.TypeOf((*MockReadSession)(nil).QueryReader), ctx, query)
}

// MockWriteSession is a mock of WriteSession interface.
type MockWriteSession struct {
	ctrl     *gomock.Controller
	recorder *MockWriteSessionMockRecorder
	isgomock struct{}
}

// MockWriteSessionMockRecorder is the mock recorder for MockWriteSession.
type MockWriteSessionMockRecorder struct {
	mock *MockWriteSession
}

// NewMockWriteSession creates a new mock instance.
func NewMockWriteSession(ctrl *gomock.Controller) *MockWriteSession {
	mock := &MockWriteSession{ctrl: ctrl}
	mock.recorder = &MockWriteSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteSession) EXPECT() *MockWriteSessionMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWriteSession) Delete(ctx context.Context, key *dal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriteSessionMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriteSession)(nil).Delete), ctx, key)
}

// DeleteMulti mocks base method.
func (m *MockWriteSession) DeleteMulti(ctx context.Context, keys []*dal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulti", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti.
func (mr *MockWriteSessionMockRecorder) DeleteMulti(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockWriteSession)(nil).DeleteMulti), ctx, keys)
}

// Insert mocks base method.
func (m *MockWriteSession) Insert(ctx context.Context, record dal.Record, opts ...dal.InsertOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockWriteSessionMockRecorder) Insert(ctx, record any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWriteSession)(nil).Insert), varargs...)
}

// InsertMulti mocks base method.
func (m *MockWriteSession) InsertMulti(ctx context.Context, records []dal.Record, opts ...dal.InsertOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, records}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockWriteSessionMockRecorder) InsertMulti(ctx, records any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, records}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockWriteSession)(nil).InsertMulti), varargs...)
}

// Set mocks base method.
func (m *MockWriteSession) Set(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockWriteSessionMockRecorder) Set(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockWriteSession)(nil).Set), ctx, record)
}

// SetMulti mocks base method.
func (m *MockWriteSession) SetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMulti indicates an expected call of SetMulti.
func (mr *MockWriteSessionMockRecorder) SetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMulti", reflect.TypeOf((*MockWriteSession)(nil).SetMulti), ctx, records)
}

// Update mocks base method.
func (m *MockWriteSession) Update(ctx context.Context, key *dal.Key, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWriteSessionMockRecorder) Update(ctx, key, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriteSession)(nil).Update), varargs...)
}

// UpdateMulti mocks base method.
func (m *MockWriteSession) UpdateMulti(ctx context.Context, keys []*dal.Key, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keys, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockWriteSessionMockRecorder) UpdateMulti(ctx, keys, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keys, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockWriteSession)(nil).UpdateMulti), varargs...)
}

// UpdateRecord mocks base method.
func (m *MockWriteSession) UpdateRecord(ctx context.Context, record dal.Record, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecord", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockWriteSessionMockRecorder) UpdateRecord(ctx, record, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockWriteSession)(nil).UpdateRecord), varargs...)
}

// MockReadwriteSession is a mock of ReadwriteSession interface.
type MockReadwriteSession struct {
	ctrl     *gomock.Controller
	recorder *MockReadwriteSessionMockRecorder
	isgomock struct{}
}

// MockReadwriteSessionMockRecorder is the mock recorder for MockReadwriteSession.
type MockReadwriteSessionMockRecorder struct {
	mock *MockReadwriteSession
}

// NewMockReadwriteSession creates a new mock instance.
func NewMockReadwriteSession(ctrl *gomock.Controller) *MockReadwriteSession {
	mock := &MockReadwriteSession{ctrl: ctrl}
	mock.recorder = &MockReadwriteSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadwriteSession) EXPECT() *MockReadwriteSessionMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockReadwriteSession) Delete(ctx context.Context, key *dal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReadwriteSessionMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReadwriteSession)(nil).Delete), ctx, key)
}

// DeleteMulti mocks base method.
func (m *MockReadwriteSession) DeleteMulti(ctx context.Context, keys []*dal.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulti", ctx, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMulti indicates an expected call of DeleteMulti.
func (mr *MockReadwriteSessionMockRecorder) DeleteMulti(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulti", reflect.TypeOf((*MockReadwriteSession)(nil).DeleteMulti), ctx, keys)
}

// Exists mocks base method.
func (m *MockReadwriteSession) Exists(ctx context.Context, key *dal.Key) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockReadwriteSessionMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockReadwriteSession)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockReadwriteSession) Get(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReadwriteSessionMockRecorder) Get(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadwriteSession)(nil).Get), ctx, record)
}

// GetMulti mocks base method.
func (m *MockReadwriteSession) GetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockReadwriteSessionMockRecorder) GetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockReadwriteSession)(nil).GetMulti), ctx, records)
}

// Insert mocks base method.
func (m *MockReadwriteSession) Insert(ctx context.Context, record dal.Record, opts ...dal.InsertOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockReadwriteSessionMockRecorder) Insert(ctx, record any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockReadwriteSession)(nil).Insert), varargs...)
}

// InsertMulti mocks base method.
func (m *MockReadwriteSession) InsertMulti(ctx context.Context, records []dal.Record, opts ...dal.InsertOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, records}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockReadwriteSessionMockRecorder) InsertMulti(ctx, records any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, records}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockReadwriteSession)(nil).InsertMulti), varargs...)
}

// QueryAllRecords mocks base method.
func (m *MockReadwriteSession) QueryAllRecords(ctx context.Context, query dal.Query) ([]dal.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllRecords", ctx, query)
	ret0, _ := ret[0].([]dal.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllRecords indicates an expected call of QueryAllRecords.
func (mr *MockReadwriteSessionMockRecorder) QueryAllRecords(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllRecords", reflect.TypeOf((*MockReadwriteSession)(nil).QueryAllRecords), ctx, query)
}

// QueryReader mocks base method.
func (m *MockReadwriteSession) QueryReader(ctx context.Context, query dal.Query) (dal.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReader", ctx, query)
	ret0, _ := ret[0].(dal.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReader indicates an expected call of QueryReader.
func (mr *MockReadwriteSessionMockRecorder) QueryReader(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReader", reflect.TypeOf((*MockReadwriteSession)(nil).QueryReader), ctx, query)
}

// Set mocks base method.
func (m *MockReadwriteSession) Set(ctx context.Context, record dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockReadwriteSessionMockRecorder) Set(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockReadwriteSession)(nil).Set), ctx, record)
}

// SetMulti mocks base method.
func (m *MockReadwriteSession) SetMulti(ctx context.Context, records []dal.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMulti", ctx, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMulti indicates an expected call of SetMulti.
func (mr *MockReadwriteSessionMockRecorder) SetMulti(ctx, records any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMulti", reflect.TypeOf((*MockReadwriteSession)(nil).SetMulti), ctx, records)
}

// Update mocks base method.
func (m *MockReadwriteSession) Update(ctx context.Context, key *dal.Key, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReadwriteSessionMockRecorder) Update(ctx, key, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReadwriteSession)(nil).Update), varargs...)
}

// UpdateMulti mocks base method.
func (m *MockReadwriteSession) UpdateMulti(ctx context.Context, keys []*dal.Key, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keys, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMulti", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMulti indicates an expected call of UpdateMulti.
func (mr *MockReadwriteSessionMockRecorder) UpdateMulti(ctx, keys, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keys, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulti", reflect.TypeOf((*MockReadwriteSession)(nil).UpdateMulti), varargs...)
}

// UpdateRecord mocks base method.
func (m *MockReadwriteSession) UpdateRecord(ctx context.Context, record dal.Record, updates []update.Update, preconditions ...dal.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, record, updates}
	for _, a := range preconditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecord", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockReadwriteSessionMockRecorder) UpdateRecord(ctx, record, updates any, preconditions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, record, updates}, preconditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockReadwriteSession)(nil).UpdateRecord), varargs...)
}
